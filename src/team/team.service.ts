import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { PlayerService } from 'src/player/player.service';
import { CreateTeamDto } from './dtos/create-team.dto';
import { Team } from './team.entity';
import { Player } from 'src/player/entities/player.entity';

@Injectable()
export class TeamService {
  constructor(
    @InjectRepository(Team)
    private readonly teamRepository: Repository<Team>,
    private readonly playerService: PlayerService
  ) {}

  getTeams(amount: number, page: number): Promise<Team[]> {
    return this.teamRepository.find(
      {
        take: amount,
        skip: page,
      }
    );
  }

  getTeam(id: string): Promise<Team> {
    return this.teamRepository.findOne(id);
  }

  addTeam(createTeamDto: CreateTeamDto): Promise<Team> {
    const players: Player[] = [];
    for (let i = 0; i < 10; i++) {
      players.push(this.playerService.returnAutoGeneratedPlayer());
    }
    const team: Team = {
      name: createTeamDto.name,
      players
    }
    return this.teamRepository.save(team);
  }

  updateTeam(team: Team): Promise<Team> {
    return this.teamRepository.save(team);
  }

  async deleteTeam(id: string): Promise<Team> {
    const team: Team = await this.teamRepository.findOne(id);
    return team !== null ? this.teamRepository.remove(team) : null;
  }
}
